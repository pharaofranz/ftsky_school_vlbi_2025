# Build OSKAR and its Python interface.
# First install required development packages.
FROM nvidia/cuda:11.8.0-base-ubuntu22.04 AS build
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_ARCH="ALL;8.0;8.6"
RUN apt-get update && apt-get install -y --no-install-recommends wget && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget build-essential python3-pip ipython3 vim gedit curl git gfortran libfuse2 sudo cmake  make g++ ca-certificates \
    cuda-cudart-dev-11-8  libcufft-dev-11-8 cuda-nvcc-11-8 python3-sphinx libcasa-tables6 libgomp1 libhdf5-103 \
    casacore-data casacore-dev casacore-tools python3-casacore ffmpeg libgsl-dev libfftw3-dev \
    libhdf5-dev libcfitsio-dev lcov libatlas3-base \
    libblas-dev libboost-date-time-dev libboost-filesystem-dev \
    libboost-program-options-dev libboost-system-dev libboost-test-dev \
    liberfa-dev libexpat1-dev libfontconfig-dev libfreetype-dev \
    liblapack-dev liblua5.3-dev libpng-dev libssl-dev \
    libxml2-dev pkg-config libpython3-dev pkg-config procps tzdata unzip \
    libopenmpi-dev openmpi-bin
RUN apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*

## Install Harp Beam
RUN git clone --depth 1 --recurse-submodules https://gitlab.com/quentingueuning/harp_beam.git /harp_beam && \
    cd /harp_beam && \
    mkdir build && \
    cd build && \
    cmake $CMAKE_ARGS .. -DCUDA_ARCH="${CUDA_ARCH}" && \
    make install -j$(nproc) && \
    cd / && rm -rf /harp_beam

## Install OSKAR
RUN git clone --depth 1 --recurse-submodules https://github.com/OxfordSKA/OSKAR.git /OSKAR && \
    cd /OSKAR && \
    mkdir build && \
    cd build && \
    cmake $CMAKE_ARGS .. -DCUDA_ARCH="${CUDA_ARCH}" -DBUILD_TESTING=OFF  && \
    make install -j$(nproc) && \
    cd / && rm -rf /OSKAR

# Install Python packages
RUN python3 -m pip install -U astropy numpy matplotlib scipy aplpy mpi4py cubical stimela cult-cargo quartical pyrap pyyaml pygdsm aegeantools cycler cython seaborn shapely progressbar pyuvdata uvtools scikit-image healpy python-dateutil scikit-rf python-casacore pyfiglet astroquery pytoml setuptools

RUN python3 -m pip install 'git+https://github.com/OxfordSKA/OSKAR.git@master#egg=oskarpy&subdirectory=python'

# Step 6: Install additional packages from GitHub
RUN python3 -m pip install git+https://github.com/telegraphic/pygdsm \
    git+https://github.com/caracal-pipeline/crystalball.git 

ARG CMAKE_ARGS="-DPORTABLE=True"
ARG EVERYBEAM_BRANCH=v0.6.1
RUN git clone --depth 1 --recurse-submodules https://git.astron.nl/RD/EveryBeam.git /EveryBeam && \
    cd /EveryBeam && \
    mkdir build && \
    cd build && \
    cmake $CMAKE_ARGS .. && \
    make install -j$(nproc) && \
    cd / && rm -rf /EveryBeam

# Step 8: Install IDG
ARG IDG_BRANCH=1.2.0
RUN git clone --depth 1 https://git.astron.nl/RD/idg.git /idg && \
    cd /idg && \
    mkdir build && \
    cd build && \
    cmake $CMAKE_ARGS .. && \
    make install -j$(nproc) && \
    cd / && rm -rf /idg

# Step 9: Install WSClean
ARG WSCLEAN_BRANCH=v3.4
RUN git clone --depth 1 https://gitlab.com/aroffringa/wsclean.git /wsclean && \
    cd /wsclean && \
    mkdir build && \
    cd build && \
    cmake $CMAKE_ARGS .. && \
    make install -j$(nproc) && \
    cd / && rm -rf /wsclean
# Step 10: Install AOFlagger
#ARG WSCLEAN_BRANCH=v3.0
RUN git clone --depth 1 https://gitlab.com/aroffringa/aoflagger.git /aoflagger && \
    cd /aoflagger && \
    mkdir build && \
    cd build && \
    cmake $CMAKE_ARGS .. && \
    make install -j$(nproc) && \
    cd / && rm -rf /aoflagger

# Download and install CASA (make sure the URL is appropriate for Ubuntu)
RUN wget --no-check-certificate https://casa.nrao.edu/download/distro/casa/release/rhel/casa-6.6.0-20-py3.8.el7.tar.xz && \
    tar xf casa-6.6.0-20-py3.8.el7.tar.xz && \
    rm -rf casa-6.6.0-20-py3.8.el7.tar.xz

# Add CASA to the PATH
ENV PATH="/casa-6.6.0-20-py3.8.el7/bin:$PATH"
ENV LC_ALL=C.UTF-8
